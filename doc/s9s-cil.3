.TH CIL 3  2019-01-16 CMON IMPERATIVE LANGUAGE
.SH NAME
CIL - Cmon Imperative Language

.SS "Introduction"
The Cmon Imperative Language (CIL) is provided for the users, to implement
monitoring and maintaining code executed by the Cmon Controller. 

The language is different from JavaScript in some ways. Here is a list of the
most important differences:

.RS 7
.TP
.B *
Semicolons are mandatory like in C or C++. 

.TP
.B *
Not all numbers are handled as double precision floating point values, we
have integers and even usigned long long integers. We need those to handle
disk sizes and network traffic measured in bytes.

.TP
.B *
There are associative arrays with the data type `Map`.

.TP
.B *
The arrays are two dimensional, but they can be used as one dimensional
arrays (e.g. a[10, 11] and a[10] are also valid).

.TP
.B *
We have a `List` type.

.TP
.B *
JavaScript uses a period in function names like `JSON.parse(text)`, here we 
use the C++ notation like `JSON::parse(text)`.

.TP
.B *
New variables created on-the-fly in functions are local variables and not
globals.

.TP
.B *
The language implements a C like #include preprocessor directive.

.RE

\"
\"
\"
.SS "CmonJobInstance Related Functions"
The CmonJobInstance is representing an instantiated CmonJob that is either
executed in the past, executed in the present or will be executed in the future.

The following functions are related to the CmonJobInstance class.

.TP
.BR "Int CmonJob::currentJobId()"
Returns the job ID of the job that executes the script if the script is indeed
executed by a job. Otherwise the return value is 0.

.TP
.BR "CmonJobInstance CmonJob::getJobInstance(jobId)"
Returns a job instance by its ID. The ID is an integer unique for the job
instance. If the job ID is valid and the user has read access to the given
object the returned object will be valid. This can be checked using the
isValid() method.

.TP
.BR "Boolean CmonJob::deleteJobInstance(jobId)"
This function will delete a job instance identified by the job ID. The method
returns true if everything went well.

.TP
.BR "Int CmonJob::firstJobId()"
Returns the ID of the first CmonJobInstance object on the system.

.TP
.BR "Int CmonJob::lastJobId()"
Returns the ID of the last CmonJobInstance object on the system.

.TP
.BR "Boolean jobInstance.canBeDeleted()"
Returns true if the job instance is in a state where it can be deleted.

.TP
.BR "CmonDateTime jobInstance.created()"
Returns the timestamp showing when the job instance was created.

.TP
.BR "CmonDateTime jobInstance.ended()"
Returns the timestamp showing when the job instance was ended.

.TP
.BR "CmonDateTime jobInstance.id()"
Returns the numerical ID of the job or 0 if the job is invalid.

.TP
.BR "Boolean jobInstance.isValid()"
Returns true if the job instance is a valid object. 

.TP
.BR "CmonDateTime jobInstance.scheduled()"
Returns the time showing when the job is scheduled to run.

.TP
.BR "CmonDateTime jobInstance.started()"
Returns the time showing when was the job started.

.TP
.BR "String jobInstance.status()"
Returns the status of the job, the state as a keyword.
Currently this can be "DEFINED", "DEQUEUED", "RUNNING", "RUNNING2", "RUNNING3",
"SCHEDULED", "RUNNING_EXT", "ABORTED", "FINISHED" or "FAILED".

.TP
.BR "List jobInstance.tags()"
Returns the tags of the job. Tags are short strings attached to the job by the
user.

.TP
.BR "String jobInstance.statusText()"
Returns the human readable status text, a short text showing what the job does
in the given pont of time.

.TP
.BR "String jobInstance.title()"
Returns the human readable title of the job.

.TP
.BR "String jobInstance.status()"
The status of the job instance as a string. 
Possible values are "DEFINED", "DEQUEUED", "RUNNING", "RUNNING2", "RUNNING3",
"SCHEDULED", "RUNNING_EXT", "ABORTED", "FINISHED", "FAILED".


