#! /bin/bash
MYNAME=$(basename "$0")
MYDIR=$(dirname "$0")
MYDIR=$(readlink -m "$MYDIR")
VERSION="0.0.6"
VERBOSE=""
LOGFILE=""
SERVER=""
OPTIONS="$*"

source "$MYDIR/utilityfunctions.sh"

#
# Prints the software version and exits.
#
function printVersionAndExit()
{
    echo "$MYNAME Version $VERSION on $(hostname)" >&2
}

function printHelpAndExit()
{
cat <<EOF
Usage:
  $MYNAME [OPTION]... [CONTAINER_NAME]...

  $MYNAME - Creates and starts containers.

  -h, --help           Print this help and exit.
  -v, --version        Print version information and exit.
  --verbose            Print more messages.
  --log-file=FILE      Store all the messages in the given file too.
  --server=SERVER      Create the container on remote server.
  --beep               Emit a beep sound.
  --alert              Amit an alert sound.

EOF
    exit 0
}

ARGS=$(\
    getopt \
        -o hvs:c:l \
        -l "help,verbose,version,log-file:,server:,beep,alert" \
        -- "$@")

if [ $? -ne 0 ]; then
    exit 6
fi

eval set -- "$ARGS"
while true; do
    case "$1" in
        -h|--help)
            shift
            printHelpAndExit
            ;;

        --verbose)
            shift
            VERBOSE="true"
            VERBOSE_OPTION="--verbose"
            ;;

        -v|--version)
            shift
            VERSION_OPTION="--version"
            ;;

        --log-file)
            shift
            LOGFILE=$(readlink -m "$1")
            shift
            ;;

        --server)
            shift
            SERVER="$1"
            shift
            ;;

        --beep)
            shift
            OPTION_BEEP="true"
            ;;

        --alert)
            shift
            OPTION_ALERT="true"
            ;;

        --)
            shift
            break
            ;;

        *)
            ;;
    esac
done

function emit_config_file()
{
    local file_name="$HOME/.pip/say.conf"

    printVerbose "Creating '$file_name'."
    mkdir -p "$(dirname $file_name)" 2>/dev/null
    cat <<EOF >$file_name
#
#
#
MQTT_SERVER="192.168.0.5"
MQTT_PORT=1883
MQTT_USER="pipas"
MQTT_PASSWORD="p"

MQTT_TOPIC="tts/say"
EOF
}

function emit_beep()
{
    printVerbose "Sending beep through mqtt"
    mosquitto_pub \
        -u "$MQTT_USER" \
        -P "$MQTT_PASSWORD" \
        -h "$MQTT_SERVER" \
        -p "$MQTT_PORT" \
        -t "tts/beep" \
        -m "alert"
}

function emit_alert()
{
#    local file="/home/pipas/star-trek-sounds/alertklaxon_clean2.mp3"
#    if [ -f "$file" ]; then
#        mplayer "$file"
#    fi
    printVerbose "Sending alert through mqtt"
        mosquitto_pub \
            -u "$MQTT_USER" \
            -P "$MQTT_PASSWORD" \
            -h "$MQTT_SERVER" \
            -p "$MQTT_PORT" \
            -t "tts/alert" \
            -m "alert"
}


#
# Checking command line arguments.
#
EXTRA_OPTIONS=$*

#
# The configuration.
#
config_file="$HOME/.pip/say.conf"

emit_config_file

if [ ! -f "$config_file" ]; then
    emit_config_file
fi

if [ -f "$config_file" ]; then
    printVerbose "Loading '$config_file'..."
    source "$config_file"
    #cat $config_file
fi

printVerbose "  MQTT_SERVER: $MQTT_SERVER"
printVerbose "   MQTT_TOPIC: $MQTT_TOPIC"

if [ "$MQTT_SERVER" -a "$MQTT_TOPIC" ]; then
    MOSQUITTO=$(which mosquitto_pub)
    if [ "$MOSQUITTO" ]; then
        printVerbose "Sending with MQTT server '$MQTT_SERVER'."
        if [ -n "$OPTION_ALERT" ]; then
            emit_alert
            sleep 2
        elif [ -n "$OPTION_BEEP" ]; then
            emit_beep
            sleep 1
        fi

        if [ "$EXTRA_OPTIONS" ]; then
            mosquitto_pub \
                -u "$MQTT_USER" \
                -P "$MQTT_PASSWORD" \
                -h "$MQTT_SERVER" \
                -p "$MQTT_PORT" \
                -t "$MQTT_TOPIC" \
                -m "$EXTRA_OPTIONS"
        fi
        exit 0
    else
        printError "The mosquitto_pub program was not found."
        printError "Install with 'sudo apt install mosquitto-clients'..."
        exit 1
    fi
fi

if [ -z "$SERVER" -a -n "$PIP_SAY_SERVER" ]; then
    SERVER="$PIP_SAY_SERVER"
fi

printVerbose "  SERVER: $SERVER"

#
# Doing the job.
#
if [ -z "$SERVER" -o "$SERVER" == $(hostname) ]; then
    if [ "$VERSION_OPTION" ]; then
        printVersionAndExit
        exit 0
    else
        if [ -n "$OPTION_BEEP" ]; then
            emit_beep
        elif [ -n "$OPTION_ALERT" ]; then
            emit_alert
        elif [ "$(which festival)" ]; then
            echo $EXTRA_OPTIONS | festival --tts
        fi
    fi
else
    #
    # We received the --server option and so we run the script on a remote
    # server.
    #
    printVerbose "Executing on server '$SERVER'."
    ssh $SERVER -- \
        sudo $MYNAME $OPTIONS 2>/dev/null &
fi

#
# I just want to notice the message before the caller continues to do things.
#
# sleep 3
