#! /bin/bash

MYNAME=$(basename "$0")
MYDIR=$(dirname "$0")
MYDIR=$(readlink -m "$MYDIR")
VERSION="0.0.6"
VERBOSE=""
LOGDIR="$HOME/.pip.log"
LOGFILE="$LOGDIR/${MYNAME}.log"
OPTION_DEVICE=""
OPTION_PRINT_FILES=""
PDU_SERVER=""
PDU_OUTLETS="all"
PDU_OPERATION="on"

MQTT_CONFIG_FILE="$HOME/.pip/mqtt.conf"

source "$MYDIR/utilityfunctions.sh"

#
# SonOTA: 
#   source: https://github.com/mirko/SonOTA/
#     blog: https://support.itead.cc/support/discussions/topics/11000017070/page/10?url_locale=
# compatibility: https://github.com/mirko/SonOTA/wiki
#
# Hack without flash:
#   https://blog.ipsumdomus.com/sonoff-switch-complete-hack-without-firmware-upgrade-1b2d6632c01
#
# Sonoff Tasmota commands: 
#   https://github.com/arendst/Sonoff-Tasmota/wiki/Commands
#

#
# Prints the software version and exits.
#
function printVersionAndExit()
{
    echo "$MYNAME Version $VERSION on $(hostname)" >&2
}


#
# Prints the help message and exits the program.
#
function printHelpAndExit()
{
cat <<EOF
Usage:
  $MYNAME [OPTION]... DEVICE 

  $MYNAME - Turns on and off pdu outlets.

  -h, --help           Print this help and exit.
  -v, --version        Print version information and exit.
  --verbose            Print more messages.
  --log-file=FILE      Store all the messages in the given file too.

  --list               List the power distribution units.
  --on                 Turn the socket on.
  --off                Turn the socket off.
  --toggle             Toggle the socket.
  --state              Check the state of the socket.
  
  --power              Read the current power in watts.
  --voltage            Measure the voltage on the PDU.
  --current            Measure the current on the PDU.
  --temperature        Read the temperature from the PDU.
  --humidity           Read the humidity percent from the PDU.

  --print-files        Print file names instead of names.
  --long               Print the long, detailed list.

  --group=GROUP        Only PDUs in the given group.
  --all                All the PDUs.
  --with-power         Lists only the ones that have power mesurements.
  --with-temperature   Lists only the ones that have temperature sensor.

EOF
    exit 0
}

ARGS=$(\
    getopt \
        -o hvs:c:l \
        -l "help,verbose,version,log-file:,list,on,off,toggle,state,\
power,voltage,current,temperature,humidity,print-files,long,group:,\
all,with-power,with-temperature" \
        -- "$@")

if [ $? -ne 0 ]; then
    exit 6
fi

eval set -- "$ARGS"
while true; do
    case "$1" in
        -h|--help)
            shift
            printHelpAndExit
            ;;

        --verbose)
            shift
            VERBOSE="true"
            VERBOSE_OPTION="--verbose"
            ;;

        -v|--version)
            shift
            VERSION_OPTION="--version"
            ;;

        --log-file)
            shift
            LOGFILE=$(readlink -m "$1")
            shift
            ;;

        --list)
            shift
            LIST_OPTION="true"
            ;;

        --on)
            shift
            PDU_OPERATION="on"
            ;;

        --power)
            shift
            PDU_OPERATION="power"
            ;;
        
        --voltage)
            shift
            PDU_OPERATION="voltage"
            ;;
        
        --current)
            shift
            PDU_OPERATION="current"
            ;;

        --off)
            shift
            PDU_OPERATION="off"
            ;;

        --toggle)
            shift
            PDU_OPERATION="toggle"
            ;;

        --state)
            shift
            PDU_OPERATION="state"
            ;;
        
        --temperature)
            shift
            PDU_OPERATION="temperature"
            ;;

        --humidity)
            shift
            PDU_OPERATION="humidity"
            ;;


        --print-files)
            shift
            OPTION_PRINT_FILES="true"
            ;;

        --long)
            shift
            OPTION_LONG="true"
            ;;

        --group)
            shift
            OPTION_GROUP="$1"
            shift
            ;;

        --all)
            shift
            OPTION_ALL="true"
            ;;

        --with-power)
            shift
            OPTION_WITH_POWER="true"
            ;;
        
        --with-temperature)
            shift
            OPTION_WITH_TEMPERATURE="true"
            ;;

        --)
            shift
            break
            ;;

        *)
            break
            ;;
    esac
done

OPTION_DEVICES="$@"

#
# Preparing the lo file.
#
#LOGFILE="$HOME/.pip.log/${OPTION_DEVICES}.log"
rm -f $HOME/.pip/*.log
logger "Log file is: '$LOGFILE'."
[ ! -d "$LOGDIR" ] && mkdir -p "$LOGDIR"
touch "$LOGFILE"

function print_value()
{
    local value="$1"
    local default="$2"

    if [ -n "$value" ]; then
        echo "$value"
    else
        echo "$default"
    fi
}

function outlet_requested()
{
    local outlet="$1"
    local outlets="$2"

    if [ -z "$outlets" -o "$outlets" == "all" ]; then
        return 0;
    fi

    for this_outlet in $(echo $outlets | tr ',' ' '); do
        if [ "$this_outlet" == "$outlet" ]; then
            return 0
        fi
    done

    return 1
}

function switch_apc()
{
    local lock_file="/tmp/${CONF_PDU_SERVER}.lock"
    local tmp
    local retval

    printVerbose "***    PDU_SERVER: $CONF_PDU_SERVER"
    printVerbose "***   PDU_OUTLETS: $PDU_OUTLETS"
    printVerbose "*** PDU_OPERATION: $PDU_OPERATION"

    tmp=$(which pip-pdu-expect)
    if [ -z "$tmp" ]; then
        printError "The 'pip-pdu-expect' was not found."
        return 1
    else
        printVerbose "*** expect_script: $tmp"
    fi
    
    tmp=$(which expect)
    if [ -z "$tmp" ]; then
        printError "The 'expect' was not found."
        return 1
    else
        printVerbose "***        expect: $tmp"
    fi

    for n in 1 2 3 4 5 6 7 8; do
        if [ ! -f "$lock_file" ]; then
            break
        fi

        sleep 1
    done

    touch "$lock_file"

    case "$PDU_OPERATION" in
        on|off)
            if [ "$PDU_OUTLETS" == "all" -a "$CONF_PDU_DELAY" != "0" ]; then
                for ((c=$CONF_PDU_FIRST_OUTLET;c<=$CONF_PDU_LAST_OUTLET;++c)); do
                    pip-pdu-expect \
                        "$CONF_PDU_SERVER" "$PDU_OPERATION" "$c" \
                        >/dev/null 2>/dev/null

                    sleep "$CONF_PDU_DELAY"
                done
            else
                for outlet in $(echo $PDU_OUTLETS | tr ',' ' '); do
                    tmp=$(mktemp)

                    printVerbose "Switching outlet $outlet $PDU_OPERATION"
                    pip-pdu-expect \
                        "$CONF_PDU_SERVER" "$PDU_OPERATION" "$outlet" \
                            >$tmp 2>$tmp

                    retval=$?
                    printVerbose "***        retval: $retval"
                    if [ $retval -ne 0 ]; then
                        cat $tmp
                    fi

                    rm -f $tmp
                done
            fi
            ;;

        state)
                has_off=""
                has_on=""

                # Command 'status' is not needed, the status is printed out
                # anyway.
                OIFS=$IFS; IFS=$'\n'
                lines=($(pip-pdu-expect "$CONF_PDU_SERVER" "" "" \
                    | grep -o '^\ *[0-9]\+:\ *\(\(OFF\)\|\(ON\)\)' \
                    | tr -d ' '))
                IFS=$OIFS
               
                for line in "${lines[@]}"; do
                    outlet="${line%:*}"
                    status="${line#*:}"

                    printVerbose "'$outlet' is '$status'"
                    if ! outlet_requested "$outlet" "$PDU_OUTLETS"; then
                        printVerbose "Not requested '$outlet' '$PDU_OUTLETS'"
                        continue
                    fi

                    [ "$status" == "ON" ]  && has_on="true"
                    [ "$status" == "OFF" ] && has_off="true"
                done

                [ -n "$has_on" -a -z "$has_off" ] && echo "on"
                [ -z "$has_on" -a -n "$has_off" ] && echo "off"
            ;;

        voltage)
            #string=$(pip-pdu-expect "$CONF_PDU_SERVER" "help" "")
            #printVerbose "*** string: '$string'" 
            echo "0";
            ;;

        current)
            for n in 1 2 3; do
                string=$(pip-pdu-expect "$CONF_PDU_SERVER" "current" "" \
                    2>/dev/null)
           
                retval=$?
                if [ "$retval" -eq 0 ]; then
                    break
                fi
                printVerbose "*** retval: '$retval'" 
                sleep 1
            done

            string="$(echo "$string" | grep 'Total:' )"
            string="$(echo "$string" | awk -F: '{ print $2 }' )"
            string="$(echo "$string" |  tr -d ' ' | tr -d 'A' | tr -d '\r')"
            print_value "$string" "0"            
            ;;

        power)
            #pip-pdu-expect "$CONF_PDU_SERVER" "power" "" | \
            #    grep "Watts" | awk '{ print $1 }' | tr -d ' '

            for n in 1 2 3; do
                string=$(pip-pdu-expect "$CONF_PDU_SERVER" "power" "" \
                    2>/dev/null)
           
                retval=$?
                if [ "$retval" -eq 0 ]; then
                    break
                fi
                printVerbose "*** retval: '$retval'" 
                sleep 1
            done

            string="$(echo "$string" | grep 'Watts' )"
            string="$(echo "$string" | awk '{ print $1 }' )"
            string="$(echo "$string" |  tr -d ' ' | tr -d '\r')"
            print_value "$string" "0"            
            ;;

    esac

    rm -f "$lock_file"
}

function switch_orvibo()
{
    local retcode

    if [ -z "$CONF_PDU_MAC" ]; then
        printError "MAC address needed to switch Orvibo devices."
        return 1
    fi

    #
    # The S20control.py single script can be downloaded from git at
    # git@github.com:glenpp/OrviboS20.git
    #
    case "$PDU_OPERATION" in 
        on)
            S20control.py poweron $CONF_PDU_SERVER $CONF_PDU_MAC \
                2>/dev/null >/dev/null
            ;;

        off)
            S20control.py poweroff $CONF_PDU_SERVER $CONF_PDU_MAC \
                2>/dev/null >/dev/null
            ;;

        state)
            printVerbose "S20control.py getstate $CONF_PDU_SERVER $CONF_PDU_MAC"
            S20control.py getstate $CONF_PDU_SERVER $CONF_PDU_MAC \
                2>/dev/null >/dev/null
            
            retcode=$?
            printVerbose "retcode: $retcode"
            if [ "$retcode" -eq 0 ]; then
                echo "on"
            else
                echo "off"
            fi
            ;;

    esac
}

#
# pipas@t7500:~$ curl http://192.168.2.5/cm?cmnd=Status%2010 2>/dev/null | grep -o '"Temperature":[^,]\+' | awk -F: '{print $2}'
# 24.4
#
# curl http://192.168.2.9/cm?cmnd=Status%208 | grep -o '"Power":[^,]\+' | awk -F: '{print $2}'
#
function switch_tasmota()
{
    local output
    local url="http://$CONF_PDU_SERVER/cm?cmnd="
    local logfile="$LOGFILE"
    local topic=""
    local string

    if [ -z "$logfile" ]; then
        logfile="/dev/null"
    fi

    #
    #
    #
    case "$PDU_OPERATION" in 
        on)
            if [ -n "$CONF_PDU_MQTT" -a -n "$MQTT_SERVER" ]; then
                #
                # Switching with mqtt.
                # https://github.com/arendst/Sonoff-Tasmota/wiki/MQTT-Features
                #
                printVerbose "Switching '$CONF_PDU_DEVICE' on with MQTT..."
                
                topic="cmnd/$CONF_PDU_DEVICE/power"
                [ -n "$CONF_PDU_OUTLET" ] && topic+=$CONF_PDU_OUTLET

                mosquitto_pub \
                    -u "$MQTT_USER" \
                    -P "$MQTT_PASSWORD" \
                    -h "$MQTT_SERVER" \
                    -t "$topic" \
                    -m 1
            elif [ -n "$CONF_PDU_OUTLET" ]; then
                curl ${url}Power${CONF_PDU_OUTLET}%20on \
                    2>/dev/null >/dev/null
            else
                # Switching a specific outlet.
                curl ${url}Power%20on \
                    2>/dev/null >/dev/null
            fi
            ;;

        off)
            if [ -n "$CONF_PDU_MQTT" -a -n "$MQTT_SERVER" ]; then
                #
                # Switching with mqtt.
                # https://github.com/arendst/Sonoff-Tasmota/wiki/MQTT-Features
                #
                printVerbose "Switching '$CONF_PDU_DEVICE' off with MQTT..."
                
                topic="cmnd/$CONF_PDU_DEVICE/power"
                [ -n "$CONF_PDU_OUTLET" ] && topic+=$CONF_PDU_OUTLET

                mosquitto_pub \
                    -u "$MQTT_USER" \
                    -P "$MQTT_PASSWORD" \
                    -h "$MQTT_SERVER" \
                    -t "$topic" \
                    -m 0
            elif [ -n "$CONF_PDU_OUTLET" ]; then            
                curl ${url}Power${CONF_PDU_OUTLET}%20off \
                    2>/dev/null >/dev/null
            else
                curl ${url}Power%20off \
                    2>/dev/null >/dev/null
            fi
            ;;

        state)
            printVerbose "Checking switch state."
            if [ -z "$CONF_PDU_OUTLET" ]; then
                output=$(curl \
                    ${url}Power%20status \
                    2>$logfile)
            else
                output=$(curl \
                    ${url}Power${CONF_PDU_OUTLET}%20status \
                    2>$logfile)
            fi

            printVerbose "output: $output"
            if echo "$output" | grep -q '"ON"'; then
                printVerbose "Result: 'on'"
                echo "on"
            else
                echo "off"
                printVerbose "Result: 'off'"
            fi
            ;;

        power)
            # 
            # Reading the power from tasmota.
            #
            string="$(curl ${url}Status%2010 2>/dev/null)"
            printVerbose " *** string: $string"
            
            string="$(echo "$string" | grep -o '"Power":[^,}]\+')"
            string="$(echo "$string" | awk -F: '{print $2}')"
            printVerbose " *** string: $string"
           
            print_value "$string" "0"
            ;;
        
        voltage)
            # 
            # Reading the voltage from tasmota.
            #
            string="$(curl ${url}Status%2010 2>/dev/null)"
            printVerbose " *** string: $string"
            
            string="$(echo "$string" | grep -o '"Voltage":[^,}]\+')"
            string="$(echo "$string" | awk -F: '{print $2}')"
            printVerbose " *** string: $string"
           
            print_value "$string" "0"
            ;;
        
        current)
            # 
            # Reading the current from tasmota.
            #
            string="$(curl ${url}Status%2010 2>/dev/null)"
            printVerbose " *** string: $string"
            
            string="$(echo "$string" | grep -o '"Current":[^,}]\+')"
            string="$(echo "$string" | awk -F: '{print $2}')"
            printVerbose " *** string: $string"
           
            print_value "$string" "0"
            ;;

        temperature)
            string="$(curl ${url}Status%2010 2>/dev/null)"
            printVerbose " *** string: $string"

            string="$(echo "$string" | grep -o '"Temperature":[^,}]\+')"
            string="$(echo "$string" | awk -F: '{print $2}')"
            printVerbose " *** string: $string"

            print_value "$string" "0"
            ;;

        humidity)
            # 
            # Reading the humidity from tasmota.
            #
            string="$(curl ${url}Status%2010 2>/dev/null)"
            printVerbose " *** string: $string"

            string="$(echo "$string" | grep -o '"Humidity":[^,}]\+')"
            string="$(echo "$string" | awk -F: '{print $2}')"
            printVerbose " *** string: $string"

            print_value "$string" "0"
            ;;
    esac
}

function print_header()
{
    echo -en $TERM_BOLD

    cat <<EOF
DEVICE           MODE  GROUP         SERVER        NAME
--------------------------------------------------------------------------------
EOF

    echo -en $TERM_NORMAL


}

function print_device_list_long()
{
    local group
    local name
    local mode

    print_header

    for config_file in $HOME/.pip/*.pdu; do
        if [ ! -f "$config_file" ]; then
            continue
        fi

        device_name=$(basename "$config_file" .pdu)
        
        CONF_PDU_NAME=""
        CONF_PDU_SERVER=""
        CONF_PDU_URL=""
        CONF_PDU_STANDARD=""
        CONF_PDU_CATEGORY=""
        CONF_PDU_MQTT=""
        CONF_PDU_MEASURES_POWER=""
        CONF_PDU_MEASURES_VOLTAGE=""
        CONF_PDU_MEASURES_CURRENT=""
        CONF_PDU_MEASURES_TEMPERATURE=""
        CONF_PDU_MEASURES_HUMIDITY=""
        source "$config_file"
    
        group="$CONF_PDU_CATEGORY"
        if [ -z "$group" ]; then
            group="-"
        fi

        if [ -n "$OPTION_GROUP" -a "$OPTION_GROUP" != "$group" ]; then
            continue
        elif [ -n "$OPTION_WITH_POWER" -a -z "$CONF_PDU_MEASURES_POWER" ]; then
            continue
        elif [ -n "$OPTION_WITH_TEMPERATURE" -a \
               -z "$CONF_PDU_MEASURES_TEMPERATURE" ]; then
            continue
        fi

        #
        # The mode string.
        #
        mode=""

        if [ -n "$CONF_PDU_MEASURES_POWER" ]; then
            mode+="W"
        else
            mode+="-"
        fi
        
        if [ -n "$CONF_PDU_MEASURES_VOLTAGE" ]; then
            mode+="V"
        else
            mode+="-"
        fi
        
        if [ -n "$CONF_PDU_MEASURES_CURRENT" ]; then
            mode+="A"
        else
            mode+="-"
        fi

        if [ -n "$CONF_PDU_MEASURES_TEMPERATURE" ]; then
            mode+="C"
        else
            mode+="-"
        fi
        
        if [ -n "$CONF_PDU_MEASURES_HUMIDITY" ]; then
            mode+="%"
        else
            mode+="-"
        fi

        printf "$DEVICE_COLOR%-16s$TERM_NORMAL "  "$device_name"
        printf "$TERM_NORMAL%-5s$TERM_NORMAL "    "$mode"
        #printf "$GROUP_COLOR%-8s$TERM_NORMAL "    "$CONF_PDU_STANDARD"
        printf "$OWNER_COLOR%-13s$TERM_NORMAL "   "$group"
        printf "$IP_COLOR%-13s$TERM_NORMAL "      "$CONF_PDU_SERVER"

        if [ -z "$OPTION_PRINT_FILES" ]; then
            printf "$COMMENT_COLOR%s$TERM_NORMAL"  "$CONF_PDU_NAME"
        else
            printf "$FILE_COLOR%s$TERM_NORMAL"     "$config_file"
        fi

        printf "\n"
    done
}

#
# Lists the devices in a brief format (only the name or only the files).
#
function print_device_list_brief()
{
    local group
    local name
    local config_file

    for config_file in $HOME/.pip/*.pdu; do
        if [ ! -f "$config_file" ]; then
            continue
        fi

        device_name=$(basename "$config_file" .pdu)
        
        CONF_PDU_NAME=""
        CONF_PDU_SERVER=""
        CONF_PDU_URL=""
        CONF_PDU_STANDARD=""
        CONF_PDU_CATEGORY=""
        CONF_PDU_MEASURES_POWER=""
        CONF_PDU_MEASURES_VOLTAGE=""
        CONF_PDU_MEASURES_CURRENT=""
        CONF_PDU_MEASURES_TEMPERATURE=""
        CONF_PDU_MEASURES_HUMIDITY=""
        source "$config_file"
    
        group="$CONF_PDU_CATEGORY"
        if [ -z "$group" ]; then
            group="-"
        fi

        if [ -n "$OPTION_GROUP" -a "$OPTION_GROUP" != "$group" ]; then
            continue
        elif [ -n "$OPTION_WITH_POWER" -a -z "$CONF_PDU_MEASURES_POWER" ]; then
            continue
        elif [ -n "$OPTION_WITH_TEMPERATURE" -a \
               -z "$CONF_PDU_MEASURES_TEMPERATURE" ]; then
            continue
        fi

        if [ -n "$OPTION_PRINT_FILES" ]; then
            printf "%s " "$config_file"
        else
            printf "%s "  "$device_name"
        fi

        printf "\n"
    done
}

if [ -f "$MQTT_CONFIG_FILE" ]; then
    printVerbose "Loading '$MQTT_CONFIG_FILE'..."
    source "$MQTT_CONFIG_FILE"
fi

#
# Checking the command line options.
#
if [ "$LIST_OPTION" ]; then
    if [ "$OPTION_LONG" ]; then
        print_device_list_long
    else
        print_device_list_brief | column -s' '
    fi

    exit 0
fi

if [ -z "$OPTION_DEVICES" ]; then
    if [ -n "$OPTION_GROUP" -o -n "$OPTION_ALL" ]; then
        OPTION_DEVICES=$(print_device_list_brief)
    fi
fi

if [ -z "$OPTION_DEVICES" ]; then
    printError "Device name is not provided."
    exit 1
fi

for OPTION_DEVICE in $OPTION_DEVICES; do
    CONFIG_FILE_PATH="$HOME/.pip/${OPTION_DEVICE}.pdu"

    if [ "$PDU_OPERATION" == "toggle" ]; then
        state=$(pip-pdu-control --state $OPTION_DEVICE)
        if [ "$state" == "on" ]; then
            pip-pdu-control --off "$OPTION_DEVICE"
        else
            pip-pdu-control --on "$OPTION_DEVICE"
        fi

        continue
    fi

    #
    # If we are requested for state and we already received the state from MQTT
    # we don't need to waste time checking it on the device.
    #
    if [ "$PDU_OPERATION" == "state" ]; then
        STATE_DIR="$HOME/.pip.measurements"
        if [ -f "$STATE_DIR/${OPTION_DEVICE}.state" ]; then
            cat "$STATE_DIR/${OPTION_DEVICE}.state" | tr '[A-Z]' '[a-z]'
            continue
        fi
    fi

    if [ ! -f "$CONFIG_FILE_PATH" ]; then
        printError "Config file '$CONFIG_FILE_PATH' does not exist."
        continue
    fi

    #
    # Loading the config file.
    #
    CONF_PDU_OUTLET=""
    CONF_PDU_MQTT=""
    CONF_PDU_NAME=""
    CONF_PDU_SERVER=""
    CONF_PDU_URL=""
    CONF_PDU_STANDARD=""
    CONF_PDU_CATEGORY=""
    CONF_PDU_DEVICE="$OPTION_DEVICE"
    CONF_PDU_MEASURES_POWER=""
    CONF_PDU_MEASURES_CURRENT=""
    CONF_PDU_MEASURES_TEMPERATURE=""
    CONF_PDU_MEASURES_HUMIDITY=""

    source "$CONFIG_FILE_PATH"

    #echo "*** CONF_PDU_OUTLET : $CONF_PDU_OUTLET"
    if [ "$CONF_PDU_OUTLET" ]; then
        PDU_OUTLETS="$CONF_PDU_OUTLET"
    fi
    
    #echo "***     PDU_OUTLETS : $PDU_OUTLETS"

    printVerbose "      device : '$OPTION_DEVICE'"
    printVerbose "               '$CONF_PDU_DEVICE'"
    printVerbose "      server : '$CONF_PDU_SERVER'"
    printVerbose "    standard : '$CONF_PDU_STANDARD'"
    printVerbose "       isMqtt: '$CONF_PDU_MQTT'"
    printVerbose "   operation : '$PDU_OPERATION'"
    printVerbose ""


    case "$CONF_PDU_STANDARD" in 
        apc)
            switch_apc
            ;;

        orvibo)
            switch_orvibo
            ;;

        tasmota)
            switch_tasmota
            ;;

        *)
            printError "The CONF_PDU_STANDARD is invalid in '$CONFIG_FILE_PATH'"
    esac

    #sleep 0.5
done


