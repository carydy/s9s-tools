#! /bin/bash

MYNAME=$(basename "$0")
MYDIR=$(dirname "$0")
MYDIR=$(readlink -m "$MYDIR")
VERSION="0.0.1"
VERBOSE=""
LOGDIR="$HOME/.pip.log"
LOGFILE="$LOGDIR/${MYNAME}.log"
OPTION_DEVICE=""
OPTION_PRINT_FILES=""
PDU_SERVER=""
PDU_OUTLETS="all"
PDU_OPERATION="on"

source "$MYDIR/utilityfunctions.sh"

#
# SonOTA: 
#   source: https://github.com/mirko/SonOTA/
#     blog: https://support.itead.cc/support/discussions/topics/11000017070/page/10?url_locale=
# compatibility: https://github.com/mirko/SonOTA/wiki
#
# Hack without flash:
#   https://blog.ipsumdomus.com/sonoff-switch-complete-hack-without-firmware-upgrade-1b2d6632c01
#
# Sonoff Tasmota commands: 
#   https://github.com/arendst/Sonoff-Tasmota/wiki/Commands
#

#
# Prints the software version and exits.
#
function printVersionAndExit()
{
    echo "$MYNAME Version $VERSION on $(hostname)" >&2
}

function printHelpAndExit()
{
cat <<EOF
Usage:
  $MYNAME [OPTION]... DEVICE 

  $MYNAME - Turns on and off pdu outlets.

  -h, --help           Print this help and exit.
  -v, --version        Print version information and exit.
  --verbose            Print more messages.
  --log-file=FILE      Store all the messages in the given file too.
  --list               List the power distribution units.
  --on                 Turn the socket on.
  --off                Turn the socket off.
  --state              Check the state of the socket.
  
  --power              Read the current power consumption in watts.
  --temperature        Read the temperature.

  --print-files        Print file names instead of names.
  --long               Print the long, detailed list.

  --group=GROUP        Only PDUs in the given group.
  --all                All the PDUs.

EXAMPLES

EOF
    exit 0
}

ARGS=$(\
    getopt \
        -o hvs:c:l \
        -l "help,verbose,version,log-file:,list,on,off,state,\
power,temperature,print-files,long,group:,all" \
        -- "$@")

if [ $? -ne 0 ]; then
    exit 6
fi

eval set -- "$ARGS"
while true; do
    case "$1" in
        -h|--help)
            shift
            printHelpAndExit
            ;;

        --verbose)
            shift
            VERBOSE="true"
            VERBOSE_OPTION="--verbose"
            ;;

        -v|--version)
            shift
            VERSION_OPTION="--version"
            ;;

        --log-file)
            shift
            LOGFILE=$(readlink -m "$1")
            shift
            ;;

        --list)
            shift
            LIST_OPTION="true"
            ;;

        --on)
            shift
            PDU_OPERATION="on"
            ;;

        --power)
            shift
            PDU_OPERATION="power"
            ;;

        --off)
            shift
            PDU_OPERATION="off"
            ;;

        --state)
            shift
            PDU_OPERATION="state"
            ;;
        
        --temperature)
            shift
            PDU_OPERATION="temperature"
            ;;

        --print-files)
            shift
            OPTION_PRINT_FILES="true"
            ;;

        --long)
            shift
            OPTION_LONG="true"
            ;;

        --group)
            shift
            OPTION_GROUP="$1"
            shift
            ;;

        --all)
            shift
            OPTION_ALL="true"
            ;;

        --)
            shift
            break
            ;;

        *)
            break
            ;;
    esac
done

OPTION_DEVICES="$@"

#
# Preparing the lo file.
#
#LOGFILE="$HOME/.pip.log/${OPTION_DEVICES}.log"
rm -f $HOME/.pip/*.log
logger "Log file is: '$LOGFILE'."
[ ! -d "$LOGDIR" ] && mkdir -p "$LOGDIR"
touch "$LOGFILE"

function outlet_requested()
{
    local outlet="$1"
    local outlets="$2"

    if [ -z "$outlets" -o "$outlets" == "all" ]; then
        return 0;
    fi

    for this_outlet in $(echo $outlets | tr ',' ' '); do
        if [ "$this_outlet" == "$outlet" ]; then
            return 0
        fi
    done

    return 1
}

function switch_apc()
{
    local lock_file="/tmp/${CONF_PDU_SERVER}.lock"
    printVerbose "***    PDU_SERVER: $CONF_PDU_SERVER"
    printVerbose "***   PDU_OUTLETS: $PDU_OUTLETS"
    printVerbose "*** PDU_OPERATION: $PDU_OPERATION"

    for n in 1 2 3 4 5 6 7 8; do
        if [ ! -f "$lock_file" ]; then
            break
        fi

        sleep 1
    done

    touch "$lock_file"

    case "$PDU_OPERATION" in
        on|off)
            if [ "$PDU_OUTLETS" == "all" -a "$CONF_PDU_DELAY" != "0" ]; then
                for ((c=$CONF_PDU_FIRST_OUTLET;c<=$CONF_PDU_LAST_OUTLET;++c)); do
                    pip-pdu-expect \
                        "$CONF_PDU_SERVER" "$PDU_OPERATION" "$c" \
                        >/dev/null 2>/dev/null

                    sleep "$CONF_PDU_DELAY"
                done
            else
                for outlet in $(echo $PDU_OUTLETS | tr ',' ' '); do
                    printVerbose "Switching outlet $outlet $PDU_OPERATION"
                    pip-pdu-expect \
                        "$CONF_PDU_SERVER" "$PDU_OPERATION" "$outlet" \
                            >/dev/null 2>/dev/null
                done
            fi
            ;;

        state)
                has_off=""
                has_on=""

                # Command 'status' is not needed, the status is printed out
                # anyway.
                OIFS=$IFS; IFS=$'\n'
                lines=($(pip-pdu-expect "$CONF_PDU_SERVER" "" "" \
                    | grep -o '^\ *[0-9]\+:\ *\(\(OFF\)\|\(ON\)\)' \
                    | tr -d ' '))
                IFS=$OIFS
               
                for line in "${lines[@]}"; do
                    outlet="${line%:*}"
                    status="${line#*:}"

                    printVerbose "'$outlet' is '$status'"
                    if ! outlet_requested "$outlet" "$PDU_OUTLETS"; then
                        printVerbose "Not requested '$outlet' '$PDU_OUTLETS'"
                        continue
                    fi

                    [ "$status" == "ON" ]  && has_on="true"
                    [ "$status" == "OFF" ] && has_off="true"
                done

                [ -n "$has_on" -a -z "$has_off" ] && echo "on"
                [ -z "$has_on" -a -n "$has_off" ] && echo "off"
            ;;

        current)
            pip-pdu-expect "$CONF_PDU_SERVER" "current" "" | \
                grep "Total" | awk -F: '{ print $2 }' | tr -d ' '
            ;;

        power)
            pip-pdu-expect "$CONF_PDU_SERVER" "power" "" | \
                grep "Watts" | awk '{ print $1 }' | tr -d ' '
            ;;

    esac

    rm -f "$lock_file"
}

function switch_orvibo()
{
    local retcode

    if [ -z "$CONF_PDU_MAC" ]; then
        printError "MAC address needed to switch Orvibo devices."
        return 1
    fi

    #
    # The S20control.py single script can be downloaded from git at
    # git@github.com:glenpp/OrviboS20.git
    #
    case "$PDU_OPERATION" in 
        on)
            S20control.py poweron $CONF_PDU_SERVER $CONF_PDU_MAC \
                2>/dev/null >/dev/null
            ;;

        off)
            S20control.py poweroff $CONF_PDU_SERVER $CONF_PDU_MAC \
                2>/dev/null >/dev/null
            ;;

        state)
            printVerbose "S20control.py getstate $CONF_PDU_SERVER $CONF_PDU_MAC"
            S20control.py getstate $CONF_PDU_SERVER $CONF_PDU_MAC \
                2>/dev/null >/dev/null
            
            retcode=$?
            printVerbose "retcode: $retcode"
            if [ "$retcode" -eq 0 ]; then
                echo "on"
            else
                echo "off"
            fi
            ;;

    esac
}

#
# pipas@t7500:~$ curl http://192.168.2.5/cm?cmnd=Status%2010 2>/dev/null | grep -o '"Temperature":[^,]\+' | awk -F: '{print $2}'
# 24.4
#
# curl http://192.168.2.9/cm?cmnd=Status%208 | grep -o '"Power":[^,]\+' | awk -F: '{print $2}'
#
function switch_tasmota()
{
    local output
    local url="http://$CONF_PDU_SERVER/cm?cmnd="
    local logfile="$LOGFILE"

    if [ -z "$logfile" ]; then
        logfile="/dev/null"
    fi

    #
    #
    #
    case "$PDU_OPERATION" in 
        on)
            if [ -z "$CONF_PDU_OUTLET" ]; then
                curl ${url}Power%20on \
                    2>/dev/null >/dev/null
            else
                curl ${url}Power${CONF_PDU_OUTLET}%20on \
                    2>/dev/null >/dev/null
            fi
            ;;

        off)
            if [ -z "$CONF_PDU_OUTLET" ]; then            
                curl ${url}Power%20off \
                    2>/dev/null >/dev/null
            else
                curl ${url}Power${CONF_PDU_OUTLET}%20off \
                    2>/dev/null >/dev/null
            fi
            ;;

        state)
            printVerbose "Checking switch state."
            if [ -z "$CONF_PDU_OUTLET" ]; then
                output=$(curl \
                    ${url}Power%20status \
                    2>$logfile)
            else
                output=$(curl \
                    ${url}Power${CONF_PDU_OUTLET}%20status \
                    2>$logfile)
            fi

            printVerbose "output: $output"
            if echo "$output" | grep -q '"ON"'; then
                printVerbose "Result: 'on'"
                echo "on"
            else
                echo "off"
                printVerbose "Result: 'off'"
            fi
            ;;

        power)
            curl ${url}Status%208 2>/dev/null | grep -o '"Power":[^,]\+' | awk -F: '{print $2}'
            ;;

        temperature)
            curl ${url}Status%2010 2>/dev/null | grep -o '"Temperature":[^,]\+' | awk -F: '{print $2}'
            ;;
    esac
}

function print_header()
{
    echo -en $TERM_BOLD

    cat <<EOF
DEVICE           GROUP         SERVER        NAME
--------------------------------------------------------------------------------
EOF

    echo -en $TERM_NORMAL


}

function print_device_list_long()
{
    local group
    local name

    print_header

    for config_file in $HOME/.pip/*.pdu; do
        if [ ! -f "$config_file" ]; then
            continue
        fi

        device_name=$(basename "$config_file" .pdu)
        
        CONF_PDU_NAME=""
        CONF_PDU_SERVER=""
        CONF_PDU_URL=""
        CONF_PDU_MEASURES_TEMPERATURE=""
        CONF_PDU_STANDARD=""
        CONF_PDU_CATEGORY=""
        source "$config_file"
    
        group="$CONF_PDU_CATEGORY"
        if [ -z "$group" ]; then
            group="-"
        fi

        if [ -n "$OPTION_GROUP" -a "$OPTION_GROUP" != "$group" ]; then
            continue
        fi

        printf "$DEVICE_COLOR%-16s$TERM_NORMAL "  "$device_name"
        #printf "$GROUP_COLOR%-8s$TERM_NORMAL "    "$CONF_PDU_STANDARD"
        printf "$OWNER_COLOR%-13s$TERM_NORMAL "   "$group"
        printf "$IP_COLOR%-13s$TERM_NORMAL "      "$CONF_PDU_SERVER"

        if [ -z "$OPTION_PRINT_FILES" ]; then
            printf "$COMMENT_COLOR%s$TERM_NORMAL"  "$CONF_PDU_NAME"
        else
            printf "$FILE_COLOR%s$TERM_NORMAL"     "$config_file"
        fi

        printf "\n"
    done
}

function print_device_list_brief()
{
    local group
    local name

    for config_file in $HOME/.pip/*.pdu; do
        if [ ! -f "$config_file" ]; then
            continue
        fi

        device_name=$(basename "$config_file" .pdu)
        
        CONF_PDU_NAME=""
        CONF_PDU_SERVER=""
        CONF_PDU_URL=""
        CONF_PDU_MEASURES_TEMPERATURE=""
        CONF_PDU_STANDARD=""
        CONF_PDU_CATEGORY=""
        source "$config_file"
    
        group="$CONF_PDU_CATEGORY"
        if [ -z "$group" ]; then
            group="-"
        fi

        if [ -n "$OPTION_GROUP" -a "$OPTION_GROUP" != "$group" ]; then
            continue
        fi

        printf "%s "  "$device_name"
        printf "\n"
    done
}

if [ "$LIST_OPTION" ]; then
    if [ "$OPTION_LONG" ]; then
        print_device_list_long
    else
        print_device_list_brief | column -s' '
    fi

    exit 0
fi

if [ -z "$OPTION_DEVICES" ]; then
    if [ -n "$OPTION_GROUP" -o -n "$OPTION_ALL" ]; then
        OPTION_DEVICES=$(print_device_list_brief)
    fi
fi

if [ -z "$OPTION_DEVICES" ]; then
    printError "Device name is not provided."
    exit 1
fi

for OPTION_DEVICE in $OPTION_DEVICES; do
    CONFIG_FILE_PATH="$HOME/.pip/${OPTION_DEVICE}.pdu"

    #
    # If we are requested for state and we already received the state from MQTT
    # we don't need to waste time checking it on the device.
    #
    if [ "$PDU_OPERATION" == "state" ]; then
        STATE_DIR="$HOME/.pip.measurements"
        if [ -f "$STATE_DIR/${OPTION_DEVICE}.state" ]; then
            cat "$STATE_DIR/${OPTION_DEVICE}.state" | tr '[A-Z]' '[a-z]'
            continue
        fi
    fi

    if [ ! -f "$CONFIG_FILE_PATH" ]; then
        printError "Config file '$CONFIG_FILE_PATH' does not exist."
        continue
    fi

    #
    # Loading the config file.
    #
    CONF_PDU_OUTLET=""

    source "$CONFIG_FILE_PATH"

    #echo "*** CONF_PDU_OUTLET : $CONF_PDU_OUTLET"
    if [ "$CONF_PDU_OUTLET" ]; then
        PDU_OUTLETS="$CONF_PDU_OUTLET"
    fi
    
    #echo "***     PDU_OUTLETS : $PDU_OUTLETS"

    printVerbose "      device : '$OPTION_DEVICE'"
    printVerbose "      server : '$CONF_PDU_SERVER'"
    printVerbose "    standard : '$CONF_PDU_STANDARD'"
    printVerbose "   operation : '$PDU_OPERATION'"


    case "$CONF_PDU_STANDARD" in 
        apc)
            switch_apc
            ;;

        orvibo)
            switch_orvibo
            ;;

        tasmota)
            switch_tasmota
            ;;

        *)
            printError "The CONF_PDU_STANDARD is invalid in '$CONFIG_FILE_PATH'"
    esac

    #sleep 0.5
done


