#! /bin/bash

MYNAME=$(basename "$0")
MYDIR=$(dirname "$0")
MYDIR=$(readlink -m "$MYDIR")
VERSION="0.0.5"
VERBOSE=""
LOGFILE="$HOME/.pip/${MYNAME}.log"
OPTION_DEVICE=""
OPTION_PRINT_FILES=""
OPTION_USER="pipas"

if [ -f "$MYDIR/utilityfunctions.sh" ]; then
    source $MYDIR/utilityfunctions.sh
else
    echo "File '$MYDIR/utilityfunctions.sh' was not found." >&2
    exit 5
fi

SUM_SERVERS=0
SUM_OFF_LINE_SERVERS=0
SUM_TESTING_SERVERS=0
SUM_IDLE_SERVERS=0
SUM_CORES=0
SUM_MEMORY=0
SUM_DISK=0
SUM_CONTAINERS=0

OPTION_STATE_FILTER=""

#
# Prints the software version and exits.
#
function printVersionAndExit()
{
    echo "$MYNAME Version $VERSION on $(hostname)" >&2
}

function printHelpAndExit()
{
cat <<EOF
Usage:
  $MYNAME [OPTION]... [HOSTNAME]...

  $MYNAME - Lists and controls servers.

  -h, --help           Print this help and exit.
  -v, --version        Print version information and exit.
  --verbose            Print more messages.
  --log-file=FILE      Store all the messages in the given file too.
  
  --list               List the power distribution units.
  --ping               Check if the server is up.
  --shut-down          Shut down the server.
  --wake               Start the server.

  --long               Print detailed/long list.
  --print-json         Print the output in JSon format.
  --print-report       Print a summary at the end.
  --print-files        Print file names instead of names.

  --user=USERNAME      Run the program in the name of the user.
  --wait               Wait for the server.
  --all                Turn on or off all the servers.

  --disabled           Process only the disabled servers.
  --idle               Process only the idle servers.
  --offline            Process only the servers that are off-line.
  --protected          Process only the servers that are protected.
  --testing            Process only the servers that are testing.

EXAMPLE:
  pip-server-control --list --long host01 host02
  pip-server-control --wake --wait host01 host02
  pip-server-control --shut-down host01 host02

EOF
    exit 0
}

ARGS=$(\
    getopt \
        -o hvs:c:l \
        -l "help,verbose,version,log-file:,long,print-report,print-json,\
list,wake,shut-down,ping,\
print-files,user:,wait,all,\
disabled,idle,offline,protected,testing" \
        -- "$@")

if [ $? -ne 0 ]; then
    exit 6
fi

eval set -- "$ARGS"
while true; do
    case "$1" in
        -h|--help)
            shift
            printHelpAndExit
            ;;

        --verbose)
            shift
            VERBOSE="true"
            VERBOSE_OPTION="--verbose"
            ;;

        -v|--version)
            shift
            VERSION_OPTION="--version"
            ;;

        --log-file)
            shift
            LOGFILE=$(readlink -m "$1")
            shift
            ;;

        --list)
            shift
            LIST_OPTION="true"
            ;;

        --wake)
            shift
            WAKE_OPTION="true"
            ;;
        
        --shut-down)
            shift
            SHUT_DOWN_OPTION="true"
            ;;

        --ping)
            shift
            OPTION_PING="true"
            ;;

        --long)
            shift
            LONG_OPTION="true"
            ;;

        --print-report)
            shift
            OPTION_PRINT_REPORT="yes"
            ;;

        --print-json)
            shift
            OPTION_PRINT_JSON="yes"
            ;;

        --user)
            shift
            OPTION_USER="$1"
            shift
            ;;

        --wait)
            shift
            WAIT_OPTION="true"
            ;;
 
        --all)
            shift
            ALL_OPTION="true"
            ;;

        --print-files)
            shift
            OPTION_PRINT_FILES="true"
            ;;

        --idle)
            shift
            OPTION_STATE_FILTER="IDLE"
            ;;
        
        --testing)
            shift
            OPTION_STATE_FILTER="TESTING"
            ;;

        --offline)
            shift
            OPTION_STATE_FILTER="OFF-LINE"
            ;;

        --disabled)
            shift
            OPTION_STATE_FILTER="DISABLED"
            ;;
        
        --protected)
            shift
            OPTION_STATE_FILTER="PROTECTED"
            ;;

        --)
            shift
            break
            ;;

        *)
            break
            ;;
    esac
done

ARGUMENTS=$*

#
# Returns true if the given server was requested providing the --server command
# line option or the --server option was not used at all.
# FIXME: Move this to include file.
#
function is_server_requested()
{
    local server="$1"
    local this_server

    if [ -z "$ARGUMENTS" ]; then
        return 0
    fi

    for this_server in $(echo "$ARGUMENTS" | tr ',' ' '); do
        if [ "$this_server" == "$server" ]; then
            return 0
        fi
    done

    return 1
}

#
# $1: the server name
#
function is_server_running_ssh()
{
    local serverName="$1"
    local isOK

    isOk=$(ssh -o ConnectTimeout=1 "$serverName" 2>/dev/null -- echo OK)
    if [ "$isOk" == "OK" ]; then
        return 0
    fi

    return 1
}

#
# $2: the server name
#
# Waits until the server is accepting SSH connections. There is also a timeout
# implemented here.
#
function wait_for_server_ssh()
{
    local serverName="$1"
    local nTry=0

    while true; do
        if is_server_running_ssh "$serverName"; then
            echo "Server '$serverName' is started."
            return 0
        fi

        # 60 x 10 = 10 minutes
        if [ "$nTry" -gt 60 ]; then
            printError "Server '$serverName' did not came alive."
            return 1
        fi

        sleep 10
        let nTry+=1
    done

    return 0
}

#
# $1: the server name
#
# This function finds the MAC address for a given host. The MAC addresses should
# be stored in '~/.pip/servers.mac' like this:
#
# server1;00:1a:a0:03:b3:b5
# server2;00:1d:09:15:17:8a
# storage01;00:1d:09:24:59:33
#
# Very primitive format, I did not want to spend much time developing it. 
#
function mac_for_server()
{
    local serverName="$1"
    local line
    local field1
    local field2

    for line in $(cat ~/.pip/servers.mac); do
        line=$(echo "$line" | tr ';' ' ' | tr ',' ' ')
        field1=$(echo "$line" | cut -d' ' -f1)
        field2=$(echo "$line" | cut -d' ' -f2)

        if [ "$field1" == "$serverName" ]; then
            echo "$field2"
            return 0
        fi
    done
}

#
# $1: the name of the server
#
function wake_server()
{
    local hostName="$1"
    local macAddress
    local pdu
    local config_file

    if [ -z "$hostName" ]; then
        return 1
    fi

    config_file="$HOME/.pip/${hostName}.host"
    if [ ! -f "$config_file" ]; then
        config_file="/home/pipas/.pip/${hostName}.host"
    fi

    if [ -f "$config_file" ]; then
        printVerbose "Loading config from '$config_file'."
        CONF_HOST_NAME=""
        CONF_HOST_URL=""
        CONF_HOST_CATEGORY=""
        CONF_HOST_MAC=""
        CONF_HOST_PROTECTED=""
        CONF_HOST_VIRTUAL=""
        CONF_HOST_PDU=""
        
        source "$config_file"
    fi

    pip-say --beep "Starting up ${hostname}."

    if [ -n "$CONF_HOST_PDU" ]; then
        for pdu in $(echo "$CONF_HOST_PDU" | tr ',' ' '); do
            echo "Switching on PDU $pdu."
            pip-pdu-control --on $pdu
        done

        sleep 2
    fi

    if [ "$hostName" == "core2" ]; then
        # ILOM needs to start...
        sleep 15

        echo "Using ILOM to start server."
        printVerbose "Using ILOM to start server."
        file="/tmp/ilom.expect"

        sudo rm -f "$file"

        cat >$file <<EOF
#!/usr/bin/expect -f

set timeout 120
spawn ssh -o StrictHostKeyChecking=no root@192.168.3.100
expect "*?assword:*"
send -- "changeme\r"
sleep 2
send -- "start -script /SYS\r"
sleep 1
send -- "exit\r"
expect eof
EOF
        chmod +x "$file"
        
        $file
        if [ $? -ne 0 ]; then
            sleep 5
            $file
        fi

        rm -f $file
    else
        macAddress=$(mac_for_server "$hostName")
        if [ -z "$macAddress" ]; then
            printError "MAC address for $hostName was not found."
            return 1
        fi

        printVerbose "Waking server ${hostName} on ${macAddress}."
        echo "Sending wake up message to host ${hostName}."
        wakeonlan "$macAddress" >/dev/null 2>/dev/null
    fi

    return 0
}

function shut_down_server()
{
    local hostname="$1"

    if [ -z "$hostname" ]; then
        return 1
    fi

    pip-say --beep "Shutting down ${hostname}."
    echo "Trying to shut down host ${hostname}."
    if [ -n "$OPTION_USER" ]; then
        ssh -o UserKnownHostsFile=/dev/null \
            -o StrictHostKeyChecking=no \
            -o LogLevel=quiet \
            -i /home/${OPTION_USER}/.ssh/id_rsa \
            "${OPTION_USER}@$hostname" -- sudo poweroff
    else
        ssh -o UserKnownHostsFile=/dev/null \
            -o StrictHostKeyChecking=no \
            -o LogLevel=quiet \
            "$hostname" -- sudo poweroff
    fi
}

#
# topic: stat/t7500/resources
# message: {"Load":0.37, "Memory": { "Total": 49449668, "Available": 30354284 }, "hostname":"t7500", "id": 0}
#
# topic: stat/t7500/disks
# message: {"Sum": {"Total": 2129717536, "Used": 846944648, "Free": 1178812776, "Percent": 42}, "hostname": "t7500", "id": 0}
#
function ping_server()
{
    local hostname="$1"
    local state
    local message

    if [ -z "$hostname" ]; then
        return 1
    fi

    if ping -c 1 -W 1 $hostname >/dev/null 2>/dev/null; then
        state="on"
    else
        state="off"
    fi
        
    if [ -n "$OPTION_PRINT_JSON" ]; then
        message="{\"hostname\": \"$hostname\", \"status\": \"$state\"}"
    else
        message="$state"
    fi

    echo "$message"
}

function print_header()
{
    echo -en $TERM_BOLD

    if [ -n "$OPTION_PRINT_FILES" ]; then
    cat <<EOF
SERVER     GROUP    CORES  MEM    DISK CN   LOAD STATUS    CONFIG_FILE
--------------------------------------------------------------------------------
EOF
    else
    cat <<EOF
SERVER     GROUP    CORES  MEM    DISK CN   LOAD STATUS    DESCRIPTION
--------------------------------------------------------------------------------
EOF
    fi

    echo -en $TERM_NORMAL
}

function print_summary()
{
    local disk_terabytes

    if [ -z "$OPTION_PRINT_REPORT" ]; then
        return 0
    fi

    let disk_terabytes=SUM_DISK
    let disk_terabytes/=1024

    printf "\n"
    printf "Summary:\n"
    printf "         Total: %'6d server(s)\n" "$SUM_SERVERS" 
    printf "       Testing: %'6d server(s)\n" "$SUM_TESTING_SERVERS" 
    printf "          Idle: %'6d server(s)\n" "$SUM_IDLE_SERVERS" 
    printf "      Off-line: %'6d server(s)\n" "$SUM_OFF_LINE_SERVERS" 
    printf "    Containers: %'6d instance(s)\n" "$SUM_CONTAINERS"
    printf "\n"
    printf "     Processor: %'6d thread(s)\n" "$SUM_CORES" 
    printf "  Total memory: %6d GBytes\n" "$SUM_MEMORY"
    printf "   Total Disks: %6d TBytes\n" "$disk_terabytes"
    printf "\n"
}

SERVER_STAT_ROOT="$HOME/.pip-servers"
SERVER_STAT_URL="www:/var/lib/test-ui/servers"
function download_current_data()
{
    local root_dir=$SERVER_STAT_ROOT

    if [ ! -d "$root_dir" ]; then
        printVerbose "Creating directory '$root_dir'."
        mkdir -p "$root_dir"
        if [ ! -d "$root_dir" ]; then
            printError "Unable to create '$root_dir'."
            return 1
        fi
    fi

    printVerbose "Entering directory '$root_dir'..."
    pushd $root_dir >/dev/null 2>/dev/null
    if [ $? -ne 0 ]; then
        printError "Unable to jump into '$root_dir'."
        return 1
    fi

    printVerbose "Downloading '$SERVER_STAT_URL/*.hostinfo'..."
    scp -p $SERVER_STAT_URL/*.hostinfo . >/dev/null 2>/dev/null

    popd >/dev/null 2>/dev/null
}

#
# Prints the age of the file in seconds, e.g. 1 means the file was modified 1
# second ago.
#
# $1: the file name
#
function fileAgeInSeconds()
{
    echo $((`date +%s` - `stat -L --format %Y $1` ))
}

function print_host_list_long()
{
    local config_file
    local info_file
    local category
    local name

    print_header

    for config_file in $HOME/.pip/*.host; do
        if [ ! -f "$config_file" ]; then
            continue
        fi

        device_name=$(basename "$config_file" .host)
        info_file="$SERVER_STAT_ROOT/${device_name}.hostinfo"

        if ! is_server_requested "$device_name"; then
            continue
        fi

        CONF_HOST_NAME=""
        CONF_HOST_URL=""
        CONF_HOST_CATEGORY=""
        CONF_HOST_MAC=""
        CONF_HOST_PROTECTED=""
        CONF_HOST_VIRTUAL=""
        CONF_HOST_PDU=""

        HOSTNAME=""
        NUMBER_OF_CORES="0"
        MEMORY_GIGABYTES="0"
        DISK_GIGABYTES="0"
        NUMBER_OF_CONTAINERS="0"
        AVERAGE_LOAD=""
        HOST_STATUS=""
        STATUS_TEXT=""

        source "$config_file"
        if [ -f "$info_file" ]; then
            source "$info_file"
        fi
    
        if [ -n "$CONF_HOST_VIRTUAL" ]; then
            continue
        fi

        category="$CONF_HOST_CATEGORY"
        if [ -z "$category" ]; then
            category="-"
        fi
    
        [ -z "$HOST_STATUS" ] && HOST_STATUS="OFF-LINE"
        [ -n "$CONF_HOST_PROTECTED" ] && HOST_STATUS="PROTECTED"

        if [ -f "$info_file" ]; then
            fileAge="$(fileAgeInSeconds "$info_file")"
            let fileAge/=60
            if [ "$fileAge" -gt 5 ]; then
                #printVerbose "File '$info_file' older that 5 minutes."
                if [ "$HOST_STATUS" != "DISABLED" ]; then
                    HOST_STATUS="OFF-LINE"
                    STATUS_TEXT="-"
                fi
            fi
        else
            if [ "$HOST_STATUS" != "DISABLED" ]; then
                HOST_STATUS="OFF-LINE"
                STATUS_TEXT="-"
            fi
        fi
       
        if [ "$OPTION_STATE_FILTER" ]; then 
            if [ "$OPTION_STATE_FILTER" != "$HOST_STATUS" ]; then
                continue
            fi
        fi

        let SUM_CORES+=NUMBER_OF_CORES
        let SUM_MEMORY+=MEMORY_GIGABYTES
        let SUM_DISK+=DISK_GIGABYTES
        let SUM_CONTAINERS+=NUMBER_OF_CONTAINERS

        [ -z "$AVERAGE_LOAD" ] && AVERAGE_LOAD="-"
        
        case "$HOST_STATUS" in
            OFF-LINE)
                let SUM_OFF_LINE_SERVERS+=1
                let SUM_SERVERS+=1
                ;;

            TESTING)
                let SUM_TESTING_SERVERS+=1
                let SUM_SERVERS+=1
                ;;
            
            IDLE)
                let SUM_IDLE_SERVERS+=1
                let SUM_SERVERS+=1
                ;;

            *)
                let SUM_SERVERS+=1
                ;;
        esac


        printf "$DEVICE_COLOR%-10s$TERM_NORMAL "  "$device_name"
        printf "$OWNER_COLOR%-10s$TERM_NORMAL "   "$category"
        #printf "$IP_COLOR%-13s$TERM_NORMAL "      "$CONF_HOST_URL"
        
        printf "%2dc "  "$NUMBER_OF_CORES"
        printf "%3dG "  "$MEMORY_GIGABYTES"
        printf "%'6dG " "$DISK_GIGABYTES"
        printf "%2d "   "$NUMBER_OF_CONTAINERS"
        printf "%6s "   "$AVERAGE_LOAD"

        if [ "$HOST_STATUS" == "IDLE" ]; then
            printf "$OK_COLOR%-9s$TERM_NORMAL " "$HOST_STATUS"
        elif [ "$HOST_STATUS" == "TESTING" ]; then
            printf "$OK_COLOR%-9s$TERM_NORMAL " "$HOST_STATUS"
        elif [ "$HOST_STATUS" == "OFF-LINE" ]; then
            printf "$WARN_COLOR%-9s$TERM_NORMAL " "$HOST_STATUS"
        elif [ "$HOST_STATUS" == "PROTECTED" ]; then
            printf "$XTERM_COLOR_RED%-9s$TERM_NORMAL " "$HOST_STATUS"
        else
            printf "%-9s " "$HOST_STATUS"
        fi

        if [ -z "$OPTION_PRINT_FILES" ]; then
            printf "$COMMENT_COLOR%s$TERM_NORMAL"  "$STATUS_TEXT"
        else
            tmp=$(echo "$config_file" | sed -e "s#$HOME/#~/#g")
            printf "$FILE_COLOR%s$TERM_NORMAL"     "$tmp"
        fi

        printf "\n"
    done
}

function print_host_list_brief()
{
    local config_file
    local info_file
    local category
    local name

    for config_file in $HOME/.pip/*.host; do
        if [ ! -f "$config_file" ]; then
            continue
        fi

        device_name=$(basename "$config_file" .host)
        info_file="$SERVER_STAT_ROOT/${device_name}.hostinfo"
        
        if ! is_server_requested "$device_name"; then
            continue
        fi

        CONF_HOST_CATEGORY=""
        CONF_HOST_MAC=""
        CONF_HOST_NAME=""
        CONF_HOST_PDU=""
        CONF_HOST_PROTECTED=""
        CONF_HOST_URL=""
        CONF_HOST_VIRTUAL=""

        HOSTNAME=""
        NUMBER_OF_CORES=""
        MEMORY_GIGABYTES=""
        DISK_GIGABYTES=""
        NUMBER_OF_CONTAINERS=""
        AVERAGE_LOAD=""
        HOST_STATUS=""
        STATUS_TEXT=""

        printVerbose "Loading config file '$config_file'."
        source "$config_file"
        if [ -f "$info_file" ]; then
            printVerbose "Loading info file '$info_file'."
            source "$info_file"
        else
            printVerbose "No info file found at '$info_file'."
        fi
    
        let SUM_SERVERS+=1
        
        if [ -n "$CONF_HOST_VIRTUAL" ]; then
            continue
        fi

        category="$CONF_HOST_CATEGORY"
        if [ -z "$category" ]; then
            category="-"
        fi
    
        [ -z "$HOST_STATUS" ] && HOST_STATUS="OFF-LINE"
        [ -n "$CONF_HOST_PROTECTED" ] && HOST_STATUS="PROTECTED"

        if [ -f "$info_file" ]; then
            fileAge="$(fileAgeInSeconds "$info_file")"
            let fileAge/=60
            if [ "$fileAge" -gt 5 ]; then
                if [ "$HOST_STATUS" != "DISABLED" ]; then
                    HOST_STATUS="OFF-LINE"
                    STATUS_TEXT="-"
                fi
            fi
        else
            if [ "$HOST_STATUS" != "DISABLED" ]; then
                HOST_STATUS="OFF-LINE"
                STATUS_TEXT="-"
            fi
        fi

        if [ "$OPTION_STATE_FILTER" ]; then 
            if [ "$OPTION_STATE_FILTER" != "$HOST_STATUS" ]; then
                continue
            fi
        fi
        
        let SUM_CORES+=NUMBER_OF_CORES
        let SUM_MEMORY+=MEMORY_GIGABYTES

        [ -z "$AVERAGE_LOAD" ] && AVERAGE_LOAD="-"
        
        printf "%s\n"  "$device_name"
    done
}

function wake_all()
{
    pip-say "Starting all servers."
        for server in \
            core2 core3 storage01 \
            host01 host02 host03 host04 host05 \
            host06 host07 host08 host09 host10 host11
        do
            pip-server-control --wake $server
            sleep .5
        done

        pip-pdu-control --on dell1955_pdu01,dell1955_pdu02
        sleep 1
        pip-pdu-control --on dell1955_pdu01,dell1955_pdu02

    pip-say "Starting all servers finished."
}

if [ -n "$LIST_OPTION" ]; then
    download_current_data
    
    if [ -n "$LONG_OPTION" ]; then
        print_host_list_long
        print_summary
    else
        print_host_list_brief | column -s' '
    fi

    exit 0
elif [ -n "$ALL_OPTION" ]; then
    if [ "$WAKE_OPTION" ]; then
        wake_all
    elif [ "$SHUT_DOWN_OPTION" ]; then
        pip-say "Shutting down all servers."
        for server in \
            core2 core3 \
            host01 host02 host03 host04 host05 \
            host06 host07 host08 host09 host10 host11 \
            blade01 blade02 blade03 blade04 blade05 blade06 \
            blade07 blade08 blade09 blade10
        do
            pip-server-control --shut-down $server
        done
        pip-say "Shutting down all servers finished."
    fi
elif [ -n "$SHUT_DOWN_OPTION" ]; then
    for hostname in $(echo "$ARGUMENTS" | tr ',' ' '); do 
        shut_down_server "$hostname"
    done
elif [ -n "$OPTION_PING" ]; then
    for hostname in $(echo "$ARGUMENTS" | tr ',' ' '); do 
        ping_server "$hostname"
    done 
elif [ -n "$WAKE_OPTION" ]; then
    #
    # Wake up the servers.
    #
    nthserver=0
    for hostname in $(echo "$ARGUMENTS" | tr ',' ' '); do 
        # Not proper: we should know when the last actual wake happened.
        if [ "$nthserver" -gt 0 ]; then
            printVerbose "Waiting a while before waking the next server."
            sleep 4
        fi

        wake_server "$hostname"
        let nthserver+=1
    done

    retcode=0
    if [ -n "$WAIT_OPTION" ]; then
        for hostname in $(echo "$ARGUMENTS" | tr ',' ' '); do
            wait_for_server_ssh "$hostname"
            if [ $? -gt 0 ]; then
                retcode=1
            fi
        done
    fi
fi


