#! /bin/bash
MYNAME=$(basename $0)
MYDIR=$(dirname $0)
MYDIR=$(readlink -m $MYDIR)
VERSION="0.0.7"
VERBOSE=""
LOGFILE="$HOME/pip-cmon-test.log"
EXITCODE=0
COMMAND_LINE_OPTIONS="$0 $*"

export WWW_PASSWORD="$PASSWORD"
export REPORT_FILE=""

export today=$(date "+%Y-%m-%d" 2>/dev/null)
export ymd=$(echo "$today" | tr '-' '_')

if [ -z "$WWW_PASSWORD" ]; then
    echo "The 'PASSWORD' environment variable should be present."
    exit 1
fi

REPORT_FILE="${ymd}.text"

source $MYDIR/utilityfunctions.sh

function printHelpAndExit()
{
cat <<EOF

Usage:
  $MYNAME [OPTION]...

  $MYNAME - File downloader script.

  -h, --help              Print this help and exit.
  -v, --version           Print version information and exit.
  --verbose               Print more messages.
  --log-file=FILE         Store all the messages in the given file too.
 
EOF

  exit 0
}

ARGS=$(\
    getopt \
        -o hvj: \
        -l "help,verbose,version,log-file:" \
        -- "$@")

if [ $? -ne 0 ]; then
    exit 6
fi

eval set -- "$ARGS"
while true; do
    case "$1" in
        -h|--help)
            shift
            printHelpAndExit
            ;;

        --verbose)
            shift
            VERBOSE="true"
            ;;

        -v|--version)
            shift
            printVersionAndExit
            ;;

        --log-file)
            shift
            LOGFILE=$(readlink -m "$1")
            shift
            ;;

        --)
            shift
            break
            ;;

        *)
            printError "Unhandled option $1"
            exit 1
            ;;
    esac
done

function print_header()
{
    cat <<EOF
                                 TEST_NAME   COMMITTED        STATUS
--------------------------------------------------------------------
EOF
}

function download_html_file()
{

    [ ! -d "$ymd" ] && mkdir "$ymd"

    test_name="$1"
    html_file="$ymd/$(basename $test_name .sh).html"

    wget \
        --user=pipas \
        --password="$WWW_PASSWORD" \
        --no-check-certificate \
        "https://89.133.67.120/ft_install/?page=test&test_name=$test_name&full_screen=true" \
        --output-document=$html_file 2>/dev/null

    git_date=$(cat $html_file | grep "^p42di 120" | awk '{print $3}')
    status=$(cat $html_file | grep "^p42di 110" | awk '{print $3}')

    printf "%42s " "$test_name" | tee --append $REPORT_FILE
    printf "%12s " "$git_date" | tee --append $REPORT_FILE
    printf "%12s " "$status" | tee --append $REPORT_FILE

    if [ "$git_date" != "$today" ]; then
        rm -f $html_file
        printf "NOT TODAY\n" | tee --append $REPORT_FILE
        return 0
    fi

    printf "\n" | tee --append $REPORT_FILE
}

function test_names()
{
    cat <<EOF
ft_user.sh 
ft_mysqlreplicationstartstop.sh
ft_access.sh 
ft_acl.sh 
ft_adminuser.sh 
ft_cat.sh 
ft_cdt.sh 
EOF
}

tests=$(test_names);

[ -f "$REPORT_FILE" ] && rm -f $REPORT_FILE

echo "{code}"
print_header | tee --append $REPORT_FILE
for testname in $tests; do
    download_html_file "$testname"
done
echo "{code}"


tar czf "${ymd}.tar.gz" "$ymd"
