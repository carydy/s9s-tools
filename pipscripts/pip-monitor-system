#! /bin/bash
MYNAME=$(basename $0)
MYDIR=$(dirname $0)
MYDIR=$(readlink -m "$MYDIR")
VERSION="0.0.2"
VERBOSE=""
LOGFILE=""
OPTION_LIST_PROPERTIES=""
OPTION_PROPERTIES=""
HOST=""
REMOTE_USER=""
SSH="ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o LogLevel=quiet"

export LC_ALL=C

#
# Prints the software version and exits.
#
function printVersionAndExit()
{
    echo "$MYNAME Version $VERSION on $(hostname)" >&2
    exit 0
}

#
# $*: the error message
#
#
# Prints an error message to the standard error. The text will not mixed up with
# the data that is printed to the standard output.
#
function printError()
{
    local datestring=$(date "+%Y-%m-%d %H:%M:%S")

    echo -e "$MYNAME($$) $*" >&2

    if [ "$LOGFILE" ]; then
        echo -e "$datestring ERROR $MYNAME($$) $*" >>"$LOGFILE"
    fi
}

#
# $*: the message
#
# Prints all the arguments but only if the program is in the verbose mode.
#
function printVerbose()
{
    local datestring=$(date "+%Y-%m-%d %H:%M:%S")

    if [ "$VERBOSE" == "true" ]; then
        echo -e "$MYNAME($$) $*" >&2
    fi

    if [ "$LOGFILE" ]; then
        echo -e "$datestring DEBUG $MYNAME($$) $*" >>"$LOGFILE"
    fi
}

function printHelpAndExit()
{
cat <<EOF
Usage:
  $MYNAME [OPTION]... 

  $MYNAME - Monitors various system properties and reports them.

 -h, --help           Print this help and exit.
 -v, --version        Print version information and exit.
 --verbose            Print more messages.
 --log-file=FILE      Store all the messages in the given file too.
 --remote-host=HOST   The host to monitor. Default is the localhost.
 --remote-user=USER   The user name used on the remote host.
 --properties=LIST    Set the properties that will be monitored.
 --list-properties    List the available properties.

EXAMPLES:
  ./pip-monitor-system --remote-host=216.18.199.114 --remote-user=laszlo --properties=load

EOF
    exit 0
}

ARGS=$(\
    getopt \
        -o hvs:c:l \
        -l "help,verbose,version,log-file:,remote-host:,remote-user:,\
properties:,list-properties" \
        -- "$@")

if [ $? -ne 0 ]; then
    exit 6
fi

eval set -- "$ARGS"
while true; do
    case "$1" in
        -h|--help)
            shift
            printHelpAndExit
            ;;

        --verbose)
            shift
            VERBOSE="true"
            VERBOSE_OPTION="--verbose"
            ;;

        -v|--version)
            shift
            VERSION_OPTION="--version"
            ;;

        --log-file)
            shift
            LOGFILE=$(readlink -m "$1")
            shift
            ;;

        --remote-host)
            shift
            HOST="$1"
            shift
            ;;

        --remote-user)
            shift
            REMOTE_USER="$1"
            shift
            ;;

        --properties)
            shift
            OPTION_PROPERTIES="$1"
            shift
            ;;

        --list-properties)
            shift
            OPTION_LIST_PROPERTIES="true"
            ;;

        --)
            shift
            break
            ;;

        *)
            ;;
    esac
done

function mqtt_config_file()
{
    local file_name="$HOME/.pip/mqtt.conf"

    if [ ! -f "$file_name" ]; then
        printVerbose "Creating '$file_name'."

        mkdir -p "$(dirname $file_name)" 2>/dev/null
cat <<EOF >$file_name
#
# Configuration file created by $MYNAME $(date)
#
MQTT_SERVER="192.168.0.5"
MQTT_PORT=1883
MQTT_USER="pipas"
MQTT_PASSWORD="p"
EOF
    fi

    echo "$file_name"
}

#
# Prints detailed memory measurements in JSon format.
#
function get_memory_measurements()
{
    local line=$(free | grep -i '^Mem:')
    local total=$(echo "$line" | awk '{print $2}')
    local available=$(echo "$line" | awk '{print $7}')

    echo "{ \"Total\": $total, \"Available\": $available }"
}

function get_load()
{
    cat /proc/loadavg | awk '{print $1}'
}

#
# Prints the memory and load in JSon format.
#
function get_resources()
{
    local hostname=$(hostname)
    local load=$(get_load)
    local memory=$(get_memory_measurements)
    local message

    message="{\"Load\":$load, \"Memory\": $memory, \"hostname\":\"$hostname\"}"
    echo "$message"
}

CONFIG_FILE=$(mqtt_config_file)
if [ ! -f "$CONFIG_FILE" ]; then
    printError "Config file '$CONFIG_FILE' not found."
    exit 5
else
    printVerbose "Loading config file '$CONFIG_FILE'."
    source "$CONFIG_FILE"
    printVerbose "    MQTT_SERVER=$MQTT_SERVER"
    printVerbose "      MQTT_PORT=$MQTT_PORT"
    printVerbose "      MQTT_USER=$MQTT_USER"
    printVerbose "  MQTT_PASSWORD=$MQTT_PASSWORD"
fi

#
# Sends the load of the local computer to the mqtt broker.
#
function local_resources_to_mqtt()
{
    local hostname=$(hostname)
    local topic="stat/${hostname}/resources"
    local message=$(get_resources)
    local retcode

    echo "------------------------------------"
    echo "     mqtt: mqtt://$MQTT_SERVER:$MQTT_PORT"
    echo "    topic: $topic"
    echo "  message: $message"
    mosquitto_pub \
        -u "$MQTT_USER" \
        -P "$MQTT_PASSWORD" \
        -h "$MQTT_SERVER" \
        -p "$MQTT_PORT" \
        -t "$topic" \
        -m "$message"

    retcode=$?
    echo "  retcode: $retcode"
}

function get_disk_stats()
{
    local hostname=$(hostname)
    local line
    local total
    local used
    local available
    local percent
    local sum

    line=$(df --total | grep total)
    total=$(echo "$line" | awk '{print $2}')
    used=$(echo "$line" | awk '{print $3}')
    available=$(echo "$line" | awk '{print $4}')
    percent=$(echo "$line" | awk '{print $5}' | tr -d '%')

    sum="\"Total\": $total, \"Used\": $used, \"Free\": $available, \"Percent\": $percent"

    echo "{\"Sum\": {$sum}, \"hostname\": \"$hostname\"}"
}

#
# 
#
function disks_to_mqtt()
{
    local hostname=$(hostname)
    local topic="stat/${hostname}/disks"
    local message=$(get_disk_stats)
    local retcode

    echo "------------------------------------"
    echo "     mqtt: mqtt://$MQTT_SERVER:$MQTT_PORT"
    echo "    topic: $topic"
    echo "  message: $message"
    mosquitto_pub \
        -u "$MQTT_USER" \
        -P "$MQTT_PASSWORD" \
        -h "$MQTT_SERVER" \
        -p "$MQTT_PORT" \
        -t "$topic" \
        -m "$message"

    retcode=$?
    echo "  retcode: $retcode"
}

printVerbose "OPTION_LIST_PROPERTIES  : $OPTION_LIST_PROPERTIES"
printVerbose "OPTION_PROPERTIES       : $OPTION_PROPERTIES"
if [ $VERSION_OPTION ]; then
    printVersionAndExit
else
    local_resources_to_mqtt
    disks_to_mqtt
    sleep 15
    
    local_resources_to_mqtt
    sleep 15
    
    local_resources_to_mqtt
    sleep 15
    
    local_resources_to_mqtt
    sleep 15
fi
