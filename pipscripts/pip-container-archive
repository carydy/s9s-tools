#! /bin/bash
MYNAME=$(basename $0)
MYDIR=$(dirname $0)
MYDIR=$(readlink -m "$MYDIR")
VERSION="0.0.5"
VERBOSE=""
LOGFILE=""
CONTAINER=""
SERVER=""
SSH="ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o LogLevel=quiet"
STOP_OPTION=""
OUTPUT_DIR=""
OUTPUT_DIR_OPTION=""
OWNER=""
STORAGE_URL=""
GZIP_OPTION=""

#
# Prints the software version and exits.
#
function printVersionAndExit()
{
    echo "$MYNAME Version $VERSION on $(hostname)." >&2
}

#
# $*: the error message
#
# Prints an error message to the standard error. The text will not mixed up with
# the data that is printed to the standard output.
#
function printError()
{
    local datestring=$(date "+%Y-%m-%d %H:%M:%S")

    echo -e "ERROR  $(hostname) $*" >&2

    if [ "$LOGFILE" ]; then
        echo -e "$datestring ERROR  $(hostname) $MYNAME $*" >>"$LOGFILE"
    fi
}

#
# $*: the error message
#
# Prints an error message to the standard error. The text will not mixed up with
# the data that is printed to the standard output.
#
function printWarning()
{
    local datestring=$(date "+%Y-%m-%d %H:%M:%S")

    echo -e "WARNING $(hostname) $*" >&2

    if [ "$LOGFILE" ]; then
        echo -e "$datestring WARNING $(hostname) $MYNAME $*" >>"$LOGFILE"
    fi
}

#
# $*: the message
#
# Prints all the arguments but only if the program is in the verbose mode.
#
function printVerbose()
{
    local datestring=$(date "+%Y-%m-%d %H:%M:%S")

    if [ "$VERBOSE" ]; then
        echo -e "DEBUG   $(hostname) $*" >&2
    fi

    if [ "$LOGFILE" ]; then
        echo -e "$datestring DEBUG   $(hostname) $MYNAME $*" >>"$LOGFILE"
    fi
}

function printHelpAndExit()
{
cat <<EOF
Usage:
  $MYNAME [OPTION]... CONTAINER_NAME

  $MYNAME - Creates archives of containers.

 -h, --help             Print this help and exit.
 -v, --version          Print version information and exit.
 --verbose              Print more messages.
 --log-file=FILE        Store all the messages in the given file too.
 --server=SERVER        Create the container on remote server.
 --stop                 Stop containers that are running.
 --output-dir=DIRECTORY The directory where the archive files go.
 --owner=USERNAME       Sets the owner of the resulting archive files.
 --storage=URL          The place where the file will be uploaded.
 --gzip                 Compress the archive with gzip.

EXAMPLES:
  pip-container-archive --gzip --verbose --stop --server=core1 --output-dir=/home/pipas --owner=pipas --storage="storage01:" dns1
  
  pip-container-archive --verbose --stop --owner=pipas --server=core1 dns1

EOF
    exit 0
}

ARGS=$(\
    getopt \
        -o hvs:c:l \
        -l "help,verbose,version,log-file:,server:,stop,output-dir:,owner:,\
storage:,gzip" \
        -- "$@")

if [ $? -ne 0 ]; then
    exit 6
fi

eval set -- "$ARGS"
while true; do
    case "$1" in
        -h|--help)
            shift
            printHelpAndExit
            ;;

        --verbose)
            shift
            VERBOSE="true"
            VERBOSE_OPTION="--verbose"
            ;;

        -v|--version)
            shift
            VERSION_OPTION="--version"
            ;;

        --log-file)
            shift
            LOGFILE="$(readlink -m "$1")"
            shift
            ;;

        --server)
            shift
            SERVER="$1"
            shift
            ;;

        --stop)
            shift
            STOP_OPTION="--stop"
            ;;

        --output-dir)
            shift
            OUTPUT_DIR="$(readlink -m "$1")"
            OUTPUT_DIR_OPTION="--output-dir=\"$1\""
            shift
            ;;

        --owner)
            shift
            OWNER="$1"
            OWNER_OPTION="--owner=\"$1\""
            shift
            ;;

        --storage)
            shift
            STORAGE_URL="$1"
            STORAGE_OPTION="--storage=\"$1\""
            shift
            ;;

        --gzip)
            shift
            GZIP_OPTION="--gzip"
            ;;

        --)
            shift
            break
            ;;

        *)
            printError "Option '$1' not handled."
            break
            ;;
    esac
done

CONTAINER="$1"

#
# Checking the command line options.
#
if [ -z "$CONTAINER" -a -z "$VERSION_OPTION" ]; then
    printError "The first argument should be the name of the container."
    exit 6
fi

#
# Checking command line arguments.
#
EXTRA_OPTIONS=$*

#
# Checking root privileges.
#
if [ -z "$SERVER" ]; then
    if [ "$EUID" -ne 0 ]; then 
        printError "This script has to have root privileges."
        exit 5
    fi
fi

function archive_file_name()
{
    local container="$1"
    local tar_file_name="${container}-container-archive.tar"

    if [ "$GZIP_OPTION" ]; then
        tar_file_name+=".gz"
    fi

    if [ "$OUTPUT_DIR" ]; then
        tar_file_name="$OUTPUT_DIR/$tar_file_name"
    else
        tar_file_name="/var/lib/lxc/$tar_file_name"
    fi

    echo "$tar_file_name"
}

function get_container_names()
{
    local pattern="$1"
    local container
    local n_containers=0

    cd /var/lib/lxc 
   
    for container in $pattern; do 
        if [ ! -d "$container" ]; then
            continue
        fi

        echo "$container"
        let n_containers+=1
    done

    printVerbose "Found $n_containers container(s)."
    return 0
}

function archive_one_container()
{
    local container="$1"
    local tar_file_name
    local old_tar_file_name
    local state
    local stopped

    #
    # If the container is running and we are allowed to stop it we stop it.
    #
    state="$(lxc-ls -f | tail -n +2 | grep "^$container " | awk '{print $2}')"
    if [ "$state" == "RUNNING" ]; then
        if [ -z "$STOP_OPTION" ]; then
            printWarning "Container '$container' is running (no --stop option)."
            printWarning "Archiving on the fly."
        else
            printVerbose "Stopping container '$container'."
            lxc-stop -n "$container"
            stopped=$?
        fi
    fi
        
    #
    # Archiving into the $OUTPUT_DIR or into /var/lib/lxc if the output dir is
    # not set.
    #
    cd /var/lib/lxc

    printVerbose "Archiving container '$container'."
    tar_file_name="$(archive_file_name "$container")"
    tar_basename="$(basename $tar_file_name)"

    old_tar_file_name="${tar_file_name}.BAK"

    if [ -f "$tar_file_name" ]; then
        printVerbose "Renaming old archive file."
        mv "$tar_file_name" "$old_tar_file_name"
    fi
    
    if [ -f "$tar_file_name" ]; then
        printError "Failed to move '$tar_file_name' aside."
        return 1
    fi

    printVerbose "Archiving into '$tar_file_name'."
    if [ "$GZIP_OPTION" ]; then
        tar --numeric-owner -czf "$tar_file_name" "$container"
    else
        tar --numeric-owner -cf "$tar_file_name" "$container"
    fi

    #
    #
    #
#    if [ "$OWNER" ]; then
#        target_dir="/home/$OWNER"
#        printVerbose "Moving file to '$target_dir/$tar_basename'."
#        mv "$tar_file_name" "$target_dir"
#        chown "$OWNER:$OWNER" "$target_dir/$tar_basename"
#    fi

    if [ "$STORAGE_URL" ]; then
        # If we have a storage URL we upload the archive file there.
        if [ "$OWNER" ]; then
            sudo -S -u $OWNER -i \
                /bin/bash -l -c \
                    "scp \"$tar_file_name\" \"$STORAGE_URL\""
        else
            scp "$tar_file_name" "$STORAGE_URL"
        fi

    fi

    #
    # If we stopped the container, we start it again.
    #
    if [ "$stopped" ]; then
        printVerbose "Starting container '$container'."
        lxc-start -n "$container"
    fi

    printVerbose "Done archiving '$container'..."
    return 0
}

function check_one_container()
{
    local container="$1"
    local state
    local retval=0

    state="$(lxc-ls -f | tail -n +2 | grep "^$container " | awk '{print $2}')"

    if [ "$state" == "RUNNING" ]; then
        if [ -z "$STOP_OPTION" ]; then
            #printWarning "Container '$container' is running (no --stop option)."
            retval=0
        fi
    elif [ "$state" == "STOPPED" ]; then
        printVerbose "Container '$container' is not running."
    else
        printError "Container '$container' has unknown ($state) state."
        retval=1
    fi

    return $retval
}

function archive_all_containers()
{
    local pattern="$1"
    local container
    local retval=0
    local containers="$(get_container_names $pattern)"

    for container in $containers; do
        if ! check_one_container "$container"; then
            retval=1
        fi
    done

    if [ $retval -ne 0 ]; then
        return $retval
    fi

    for container in $containers; do
        if ! archive_one_container "$container"; then
            retval=1
        fi
    done

    return $retval
}

#
# Doing the job.
#
if [ -z "$SERVER" ]; then
    if [ "$VERSION_OPTION" ]; then
        printVersionAndExit
        exit 0
    else
        archive_all_containers "$EXTRA_OPTIONS"
    fi
else
    #
    # We received the --server option and so we run the script on a remote
    # server.
    #
    printVerbose "Executing on server '$SERVER'."
    $SSH $SERVER -- \
        sudo $MYNAME \
            $GZIP_OPTION \
            $VERSION_OPTION $VERBOSE_OPTION \
            $STOP_OPTION $OUTPUT_DIR_OPTION \
            $OWNER_OPTION $STORAGE_OPTION \
            "$EXTRA_OPTIONS"

    if [ -n "$SERVER" -a -z "$VERSION_OPTION" ]; then
        for container in $EXTRA_OPTIONS; do
            tar_file_name="$(archive_file_name "$container")"
            tar_basename="$(basename "$tar_file_name")"
            printVerbose "Downloading $tar_file_name"
            printVerbose "  to $tar_basename"
            $SSH $SERVER -- \
                "sudo cat $tar_file_name" >$tar_basename
        done
    fi

#    if [ "$SERVER" ]; then
#        for container in $EXTRA_OPTIONS; do
#            tar_file_name="$(archive_file_name "$container")"
#            tar_basename="$(basename "$tar_file_name")"
#            scp \
#                "$SERVER:$tar_basename" \
#                .
#        done
#    fi
fi

